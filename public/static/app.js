// Infinite Nothing Scroll - The Profound Journey of Meaninglessness

class InfiniteWisdom {
    constructor() {
        this.contentContainer = document.getElementById('wisdom-container');
        this.isLoading = false;
        this.scrollCount = 0;
        
        // Predefined "profound" content that gets progressively more ridiculous
        this.profoundTexts = [
            "Trong v≈© tr·ª• bao la, ch√∫ng ta ch·ªâ l√† nh·ªØng h·∫°t b·ª•i nh·ªè b√©...",
            "√ù nghƒ©a c·ªßa cu·ªôc s·ªëng kh√¥ng ph·∫£i ƒë·ªÉ t√¨m ki·∫øm, m√† ƒë·ªÉ t·∫°o ra...",
            "Khi b·∫°n nh√¨n v√†o v·ª±c th·∫≥m, v·ª±c th·∫≥m c≈©ng nh√¨n l·∫°i b·∫°n... v√† n√≥ ƒëang c∆∞·ªùi kh√∫c kh√≠ch",
            "Tri·∫øt l√Ω c·ªï x∆∞a d·∫°y: 'Bi·∫øt m√¨nh l√† kh√¥ng bi·∫øt g√¨'... nh∆∞ng t√¥i th·∫≠m ch√≠ c√≤n kh√¥ng bi·∫øt ƒëi·ªÅu ƒë√≥",
            "Th·ªùi gian l√† m·ªôt ·∫£o t∆∞·ªüng... ƒë·∫∑c bi·ªát l√† khi b·∫°n ƒëang ch·ªù pizza ƒë∆∞·ª£c giao",
            "S·ª± im l·∫∑ng l√† v√†ng... nh∆∞ng ti·∫øng c∆∞·ªùi l√† kim c∆∞∆°ng",
            "ƒê∆∞·ªùng ƒë·ªùi nh∆∞ m·ªôt cu·ªôc h√†nh tr√¨nh... v√† t√¥i ƒë√£ qu√™n mang theo b·∫£n ƒë·ªì",
            "H·∫°nh ph√∫c l√† khi th·ª±c t·∫ø ƒë√∫ng v·ªõi k·ª≥ v·ªçng... ho·∫∑c khi b·∫°n h·∫° th·∫•p k·ª≥ v·ªçng xu·ªëng ƒë·ªß th·∫•p",
            "Ng∆∞·ªùi kh√¥n ngoan n√≥i √≠t... nh∆∞ng ng∆∞·ªùi ngu ng·∫©y th√¨ tweet nhi·ªÅu",
            "Cu·ªôc s·ªëng nh∆∞ m·ªôt h·ªôp socola... b·∫°n kh√¥ng bao gi·ªù bi·∫øt vi√™n n√†o b·ªã ki·∫øn c·∫Øn",
            "T√¨nh y√™u l√† m√π... nh∆∞ng h√¥n nh√¢n l√†m b·∫°n l·∫•y l·∫°i th·ªã l·ª±c",
            "Th√†nh c√¥ng l√† 1% c·∫£m h·ª©ng, 99% m·ªì h√¥i... v√† 50% to√°n h·ªçc t·ªìi",
            "H√£y s·ªëng nh∆∞ ng√†y h√¥m nay l√† ng√†y cu·ªëi... nh∆∞ng ƒë·ª´ng qu√™n tr·∫£ h√≥a ƒë∆°n ƒëi·ªán",
            "Tri th·ª©c l√† s·ª©c m·∫°nh... nh∆∞ng wifi m·∫°nh h∆°n",
            "Nh·ªØng ƒëi·ªÅu t·ªët nh·∫•t trong cu·ªôc s·ªëng l√† mi·ªÖn ph√≠... tr·ª´ pizza",
            "Th·ªùi gian tr√¥i nhanh khi b·∫°n ƒëang vui... v√† ch·∫≠m nh∆∞ r√πa khi b·∫°n ƒëang h·ªçp",
            "Con ng∆∞·ªùi sinh ra b√¨nh ƒë·∫≥ng... cho ƒë·∫øn khi ai ƒë√≥ ph√°t minh ra wifi VIP",
            "ƒê·ª´ng kh√≥c v√¨ s·ªØa ƒë√£ ƒë·ªï... tr·ª´ khi ƒë√≥ l√† s·ªØa organic ƒë·∫Øt ti·ªÅn",
            "M·ªôt h√†nh tr√¨nh ng√†n d·∫∑m b·∫Øt ƒë·∫ßu t·ª´ m·ªôt b∆∞·ªõc... ho·∫∑c m·ªôt c√∫ click Grab",
            "S·ª± ki√™n nh·∫´n l√† m·ªôt ƒë·ª©c t√≠nh... nh∆∞ng t√¥i mu·ªën n√≥ ngay b√¢y gi·ªù!",
            "Ti·ªÅn kh√¥ng mua ƒë∆∞·ª£c h·∫°nh ph√∫c... nh∆∞ng n√≥ mua ƒë∆∞·ª£c pizza, c≈©ng t∆∞∆°ng t·ª± th√¥i",
            "L·ªãch s·ª≠ l·∫∑p l·∫°i ch√≠nh n√≥... nh∆∞ nh·ªØng l·ªùi b√†i h√°t K-pop",
            "S·ª± th·∫≠t s·∫Ω gi·∫£i ph√≥ng b·∫°n... nh∆∞ng tr∆∞·ªõc ti√™n n√≥ s·∫Ω l√†m b·∫°n t·ª©c gi·∫≠n",
            "Kh√¥ng c√≥ g√¨ l√† kh√¥ng th·ªÉ... tr·ª´ vi·ªác t√¥i hi·ªÉu JavaScript closures",
            "H√£y l√† ch√≠nh m√¨nh... tr·ª´ khi b·∫°n c√≥ th·ªÉ l√† Batman, th√¨ h√£y l√† Batman"
        ];

        this.init();
    }

    init() {
        // Add initial content
        this.addContent("Ch√†o m·ª´ng ƒë·∫øn v·ªõi h√†nh tr√¨nh kh√°m ph√° v√¥ nghƒ©a...", "text");
        
        // Setup scroll listener
        window.addEventListener('scroll', () => this.handleScroll());
        
        // Add some initial mystery content
        setTimeout(() => {
            this.addContent("B·∫°n ƒëang t√¨m ki·∫øm √Ω nghƒ©a?", "text");
        }, 2000);
        
        setTimeout(() => {
            this.addContent("Ho·∫∑c ch·ªâ ƒëang tr√¨ ho√£n c√¥ng vi·ªác?", "text");
        }, 4000);
    }

    handleScroll() {
        if (this.isLoading) return;
        
        const scrollHeight = document.documentElement.scrollHeight;
        const scrollTop = document.documentElement.scrollTop;
        const clientHeight = document.documentElement.clientHeight;
        
        // Trigger when user scrolls to 80% of the page
        if (scrollTop + clientHeight >= scrollHeight * 0.8) {
            this.loadMoreContent();
        }
    }

    async loadMoreContent() {
        this.isLoading = true;
        this.scrollCount++;
        
        // Show loading indicator
        this.addLoadingIndicator();
        
        // Random content type
        const contentTypes = ['text', 'joke', 'meme'];
        const randomType = contentTypes[Math.floor(Math.random() * contentTypes.length)];
        
        try {
            switch (randomType) {
                case 'text':
                    await this.addProfoundText();
                    break;
                case 'joke':
                    await this.addJoke();
                    break;
                case 'meme':
                    await this.addMeme();
                    break;
            }
        } catch (error) {
            console.error('Error loading content:', error);
            this.addContent("L·ªói trong matrix... ho·∫∑c ch·ªâ l√† API ƒëang ngh·ªâ coffee ‚òï", "text");
        }
        
        this.removeLoadingIndicator();
        this.isLoading = false;
    }

    addProfoundText() {
        const randomText = this.profoundTexts[Math.floor(Math.random() * this.profoundTexts.length)];
        this.addContent(randomText, "text");
    }

    async addJoke() {
        try {
            const response = await fetch('https://v2.jokeapi.dev/joke/Any?type=single&safe-mode');
            const data = await response.json();
            
            let jokeText = data.joke || "T·∫°i sao l·∫≠p tr√¨nh vi√™n kh√¥ng th√≠ch thi√™n nhi√™n? V√¨ n√≥ c√≥ qu√° nhi·ªÅu bugs! üêõ";
            
            // Add Vietnamese translation for English jokes
            if (data.joke && !this.isVietnamese(data.joke)) {
                jokeText = `üé≠ ${data.joke}\n\n(ƒê√πa th·∫ø th√¥i, ƒë·ª´ng Google Translate nh√©!)`;
            }
            
            this.addContent(jokeText, "joke");
        } catch (error) {
            this.addContent("Joke API ƒëang bu·ªìn v√† kh√¥ng mu·ªën k·ªÉ chuy·ªán c∆∞·ªùi üò¢", "text");
        }
    }

    async addMeme() {
        try {
            const response = await fetch('https://meme-api.com/gimme');
            const data = await response.json();
            
            if (data.url) {
                this.addContent(data.url, "meme", data.title);
            } else {
                this.addContent("Meme b·ªã m·∫•t trong kh√¥ng gian ·∫£o... nh∆∞ t·∫•t c·∫£ hy v·ªçng c·ªßa ch√∫ng ta", "text");
            }
        } catch (error) {
            this.addContent("Meme API ƒëang c√≥ existential crisis ü§î", "text");
        }
    }

    isVietnamese(text) {
        const vietnameseChars = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i;
        return vietnameseChars.test(text);
    }

    addContent(content, type, title = '') {
        const contentElement = document.createElement('div');
        contentElement.className = 'content-item opacity-0 transform translate-y-4 transition-all duration-700 ease-out';
        
        let innerHTML = '';
        
        switch (type) {
            case 'text':
                innerHTML = `
                    <div class="text-content">
                        <p class="text-lg md:text-xl leading-relaxed text-gray-800">${content}</p>
                    </div>
                `;
                break;
                
            case 'joke':
                innerHTML = `
                    <div class="joke-content bg-gradient-to-r from-orange-50 to-yellow-50 p-6 rounded-lg border-l-4 border-orange-400">
                        <div class="text-sm text-orange-600 font-medium mb-2">WISDOM FRAGMENT</div>
                        <p class="text-gray-800 whitespace-pre-line">${content}</p>
                    </div>
                `;
                break;
                
            case 'meme':
                innerHTML = `
                    <div class="meme-content text-center">
                        <div class="text-sm text-gray-500 mb-4">VISUAL ENLIGHTENMENT</div>
                        ${title ? `<h3 class="text-lg font-medium mb-4 text-gray-700">${title}</h3>` : ''}
                        <img src="${content}" alt="Meme" class="max-w-full h-auto rounded-lg shadow-lg mx-auto" loading="lazy"
                             onerror="this.parentElement.innerHTML='<p class=\\'text-gray-500\\'>H√¨nh ·∫£nh ƒë√£ bi·∫øn m·∫•t v√†o h∆∞ v√¥... nh∆∞ t·∫•t c·∫£ m·ªçi th·ª© kh√°c üëª</p>'">
                    </div>
                `;
                break;
        }
        
        contentElement.innerHTML = innerHTML;
        this.contentContainer.appendChild(contentElement);
        
        // Trigger animation
        setTimeout(() => {
            contentElement.classList.remove('opacity-0', 'translate-y-4');
            contentElement.classList.add('opacity-100', 'translate-y-0');
        }, 100);
        
        // Add some spacing
        const spacer = document.createElement('div');
        spacer.className = 'h-12';
        this.contentContainer.appendChild(spacer);
    }

    addLoadingIndicator() {
        const loader = document.createElement('div');
        loader.id = 'loading-indicator';
        loader.className = 'text-center py-8';
        loader.innerHTML = `
            <div class="inline-flex items-center space-x-2">
                <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-500"></div>
                <span class="text-gray-500">ƒêang t·∫£i s·ª± kh√¥n ngoan...</span>
            </div>
        `;
        this.contentContainer.appendChild(loader);
    }

    removeLoadingIndicator() {
        const loader = document.getElementById('loading-indicator');
        if (loader) {
            loader.remove();
        }
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    new InfiniteWisdom();
    
    // Add some interactive elements
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            alert('Kh√¥ng c√≥ l·ªëi tho√°t kh·ªèi cu·ªôc s·ªëng... nh∆∞ng c√≥ th·ªÉ refresh trang n√†y üîÑ');
        }
    });
    
    // Add click counter for fun
    let clickCount = 0;
    document.addEventListener('click', () => {
        clickCount++;
        if (clickCount === 10) {
            alert('B·∫°n ƒë√£ click 10 l·∫ßn! ƒê√≥ l√†... m·ªôt th√†nh t√≠ch ƒë√°ng ghi nh·∫≠n? üéâ');
        } else if (clickCount === 50) {
            alert('50 clicks! B·∫°n th·ª±c s·ª± c·∫ßn m·ªôt hobby m·ªõi üòÖ');
        } else if (clickCount === 100) {
            alert('100 clicks!!! OK, t√¥i th√°n ph·ª•c s·ª± ki√™n tr√¨ c·ªßa b·∫°n üëè');
        }
    });
});